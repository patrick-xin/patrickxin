{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import type { ComputedFields } from \"contentlayer/source-files\";\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport readingTime from \"reading-time\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeCodeTitles from \"rehype-code-titles\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkExternalLinks from \"remark-external-links\";\nimport { visit } from \"unist-util-visit\";\nimport rehypePrism from \"rehype-prism-plus\";\n\nconst computedFields: ComputedFields = {\n\treadingTime: { type: \"json\", resolve: (doc) => readingTime(doc.body.raw) },\n\twordCount: {\n\t\ttype: \"number\",\n\t\tresolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n\t},\n\tslug: {\n\t\ttype: \"string\",\n\t\tresolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n\t},\n\turl: {\n\t\ttype: \"string\",\n\t\tresolve: (post) => `/post/${post._raw.flattenedPath}`,\n\t},\n};\n\nconst Post = defineDocumentType(() => ({\n\tname: \"Post\",\n\tfilePathPattern: \"**/*.mdx\",\n\tcontentType: \"mdx\",\n\tfields: {\n\t\ttitle: { type: \"string\", required: true },\n\t\tpublishedAt: { type: \"string\", required: true },\n\t\tupdatededAt: { type: \"string\", required: false },\n\t\tdescription: { type: \"string\", required: true },\n\t\timage: { type: \"string\", required: true },\n\t\tisPublished: { type: \"boolean\", required: true },\n\t\ttoc: { type: \"boolean\", required: true },\n\t\tthumbnail: { type: \"json\", required: false },\n\t\tcategory: { type: \"enum\", required: true, options: [\"web\", \"ai\"] },\n\t\ttags: { type: \"list\", of: { type: \"string\" }, required: true },\n\t},\n\tcomputedFields,\n}));\n\nconst contentLayerConfig = makeSource({\n\tcontentDirPath: \"content/posts\",\n\tdocumentTypes: [Post],\n\tmdx: {\n\t\tremarkPlugins: [remarkExternalLinks],\n\t\trehypePlugins: [\n\t\t\t() => (tree) => {\n\t\t\t\tvisit(tree, (node) => {\n\t\t\t\t\tif (node?.type === \"element\" && node?.tagName === \"pre\") {\n\t\t\t\t\t\tconst [codeEl] = node.children;\n\n\t\t\t\t\t\tif (codeEl.tagName !== \"code\") return;\n\n\t\t\t\t\t\tnode.raw = codeEl.children?.[0].value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\trehypeSlug,\n\t\t\trehypeCodeTitles,\n\t\t\t[rehypePrism, { ignoreMissing: true, showLineNumbers: true }],\n\t\t\t() => (tree) => {\n\t\t\t\tvisit(tree, (node) => {\n\t\t\t\t\tif (node?.type === \"element\" && node?.tagName === \"pre\") {\n\t\t\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\t\t\tchild.properties.raw = node.raw;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t[\n\t\t\t\trehypeAutolinkHeadings,\n\t\t\t\t{\n\t\t\t\t\tbehavior: \"append\",\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t},\n});\n\nexport default contentLayerConfig;\n"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,iBAAiB;AACxB,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,yBAAyB;AAChC,SAAS,aAAa;AACtB,OAAO,iBAAiB;AAExB,IAAM,iBAAiC;AAAA,EACtC,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACzE,WAAW;AAAA,IACV,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,IAAI,MAAM,OAAO,EAAE;AAAA,EAC/C;AAAA,EACA,MAAM;AAAA,IACL,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,EAC/D;AAAA,EACA,KAAK;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,SAAS,SAAS,KAAK,KAAK,aAAa;AAAA,EACpD;AACD;AAEA,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACtC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACP,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC/C,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,WAAW,UAAU,KAAK;AAAA,IAC/C,KAAK,EAAE,MAAM,WAAW,UAAU,KAAK;AAAA,IACvC,WAAW,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IAC3C,UAAU,EAAE,MAAM,QAAQ,UAAU,MAAM,SAAS,CAAC,OAAO,IAAI,EAAE;AAAA,IACjE,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,EAC9D;AAAA,EACA;AACD,EAAE;AAEF,IAAM,qBAAqB,WAAW;AAAA,EACrC,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACJ,eAAe,CAAC,mBAAmB;AAAA,IACnC,eAAe;AAAA,MACd,MAAM,CAAC,SAAS;AACf,cAAM,MAAM,CAAC,SAAS;AACrB,cAAI,MAAM,SAAS,aAAa,MAAM,YAAY,OAAO;AACxD,kBAAM,CAAC,MAAM,IAAI,KAAK;AAEtB,gBAAI,OAAO,YAAY;AAAQ;AAE/B,iBAAK,MAAM,OAAO,WAAW,CAAC,EAAE;AAAA,UACjC;AAAA,QACD,CAAC;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,aAAa,EAAE,eAAe,MAAM,iBAAiB,KAAK,CAAC;AAAA,MAC5D,MAAM,CAAC,SAAS;AACf,cAAM,MAAM,CAAC,SAAS;AACrB,cAAI,MAAM,SAAS,aAAa,MAAM,YAAY,OAAO;AACxD,uBAAW,SAAS,KAAK,UAAU;AAClC,oBAAM,WAAW,MAAM,KAAK;AAAA,YAC7B;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,UACC,UAAU;AAAA,QACX;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD,CAAC;AAED,IAAO,8BAAQ;",
  "names": []
}
