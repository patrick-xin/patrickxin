{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import type { ComputedFields } from \"contentlayer/source-files\";\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport readingTime from \"reading-time\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeCodeTitles from \"rehype-code-titles\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkExternalLinks from \"remark-external-links\";\nimport { visit } from \"unist-util-visit\";\nimport rehypePrism from \"rehype-prism-plus\";\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: \"json\", resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n  },\n  url: {\n    type: \"string\",\n    resolve: (post) => `/post/${post._raw.flattenedPath}`,\n  },\n};\n\nconst Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: \"**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    publishedAt: { type: \"string\", required: true },\n    updatededAt: { type: \"string\", required: false },\n    description: { type: \"string\", required: true },\n    image: { type: \"string\", required: true },\n    isPublished: { type: \"boolean\", required: true },\n    toc: { type: \"boolean\", required: true },\n    thumbnail: { type: \"json\", required: false },\n    category: { type: \"enum\", required: true, options: [\"web\", \"ai\"] },\n    tags: { type: \"list\", of: { type: \"string\" }, required: true },\n  },\n  computedFields,\n}));\n\nconst contentLayerConfig = makeSource({\n  contentDirPath: \"content/posts\",\n  documentTypes: [Post],\n  mdx: {\n    remarkPlugins: [remarkExternalLinks],\n    rehypePlugins: [\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\n            const [codeEl] = node.children;\n\n            if (codeEl.tagName !== \"code\") return;\n\n            node.raw = codeEl.children?.[0].value;\n          }\n        });\n      },\n      rehypeSlug,\n      rehypeCodeTitles,\n      [rehypePrism, { ignoreMissing: true, showLineNumbers: true }],\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\n            for (const child of node.children) {\n              child.properties.raw = node.raw;\n            }\n          }\n        });\n      },\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: \"append\",\n        },\n      ],\n    ],\n  },\n});\n\nexport default contentLayerConfig;\n"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,iBAAiB;AACxB,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,yBAAyB;AAChC,SAAS,aAAa;AACtB,OAAO,iBAAiB;AAExB,IAAM,iBAAiC;AAAA,EACrC,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACzE,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,EAChE;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,SAAS,CAAC,SAAS,SAAS,KAAK,KAAK,aAAa;AAAA,EACrD;AACF;AAEA,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC/C,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,WAAW,UAAU,KAAK;AAAA,IAC/C,KAAK,EAAE,MAAM,WAAW,UAAU,KAAK;AAAA,IACvC,WAAW,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IAC3C,UAAU,EAAE,MAAM,QAAQ,UAAU,MAAM,SAAS,CAAC,OAAO,IAAI,EAAE;AAAA,IACjE,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,EAC/D;AAAA,EACA;AACF,EAAE;AAEF,IAAM,qBAAqB,WAAW;AAAA,EACpC,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,mBAAmB;AAAA,IACnC,eAAe;AAAA,MACb,MAAM,CAAC,SAAS;AACd,cAAM,MAAM,CAAC,SAAS;AACpB,cAAI,MAAM,SAAS,aAAa,MAAM,YAAY,OAAO;AACvD,kBAAM,CAAC,MAAM,IAAI,KAAK;AAEtB,gBAAI,OAAO,YAAY;AAAQ;AAE/B,iBAAK,MAAM,OAAO,WAAW,CAAC,EAAE;AAAA,UAClC;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,aAAa,EAAE,eAAe,MAAM,iBAAiB,KAAK,CAAC;AAAA,MAC5D,MAAM,CAAC,SAAS;AACd,cAAM,MAAM,CAAC,SAAS;AACpB,cAAI,MAAM,SAAS,aAAa,MAAM,YAAY,OAAO;AACvD,uBAAW,SAAS,KAAK,UAAU;AACjC,oBAAM,WAAW,MAAM,KAAK;AAAA,YAC9B;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;AAED,IAAO,8BAAQ;",
  "names": []
}
